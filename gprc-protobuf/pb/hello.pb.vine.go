// Code generated by proto-gen-vine. DO NOT EDIT.
// source: pb/hello.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	client "github.com/lack-io/vine/core/client"
	server "github.com/lack-io/vine/core/server"
	api "github.com/lack-io/vine/lib/api"
	apipb "github.com/lack-io/vine/proto/apis/api"
	openapi "github.com/lack-io/vine/proto/apis/openapi"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// API Endpoints for Rpc service
func NewRpcEndpoints() []*apipb.Endpoint {
	return []*apipb.Endpoint{
		&apipb.Endpoint{
			Name:    "Rpc.HelloWorld",
			Path:    []string{"/api/{name}"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Swagger OpenAPI 3.0 for Rpc service
func NewRpcOpenAPI() *openapi.OpenAPI {
	return &openapi.OpenAPI{
		Openapi: "3.0.1",
		Info: &openapi.OpenAPIInfo{
			Title:       "RpcService",
			Description: "OpenAPI3.0 for Rpc",
			Version:     "v1.0.0",
		},
		Servers: []*openapi.OpenAPIServer{},
		Tags: []*openapi.OpenAPITag{
			&openapi.OpenAPITag{
				Name:        "Rpc",
				Description: "OpenAPI3.0 for Rpc",
			},
		},
		Paths: map[string]*openapi.OpenAPIPath{
			"/api/{name}": &openapi.OpenAPIPath{
				Post: &openapi.OpenAPIPathDocs{
					Tags:        []string{"Rpc"},
					Description: "Rpc HelloWorld",
					OperationId: "RpcHelloWorld",
					Parameters: []*openapi.PathParameters{
						&openapi.PathParameters{
							Name:        "name",
							In:          "path",
							Description: "HelloWorldRequest field name",
							Required:    true,
							Style:       "form",
							Explode:     true,
							Schema: &openapi.Schema{
								Type: "string",
							},
						},
					},
					RequestBody: &openapi.PathRequestBody{
						Description: "HelloWorld HelloWorldRequest",
						Content: &openapi.PathRequestBodyContent{
							ApplicationJson: &openapi.ApplicationContent{
								Schema: &openapi.Schema{
									Ref: "#/components/schemas//pb.HelloWorldRequest",
								},
							},
						},
					},
					Responses: map[string]*openapi.PathResponse{
						"200": &openapi.PathResponse{
							Description: "successful response (stream response)",
							Content: &openapi.PathRequestBodyContent{
								ApplicationJson: &openapi.ApplicationContent{
									Schema: &openapi.Schema{Ref: "#/components/schemas//pb.HelloWorldResponse"},
								},
							},
						},
					},
					Security: []*openapi.PathSecurity{},
				},
			},
		},
		Components: &openapi.OpenAPIComponents{
			SecuritySchemes: &openapi.SecuritySchemes{},
			Schemas: map[string]*openapi.Model{
				"/pb.HelloWorldRequest": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"name": &openapi.Schema{
							Type: "string",
						},
					},
				},
				"/pb.HelloWorldResponse": &openapi.Model{
					Type: "object",
					Properties: map[string]*openapi.Schema{
						"reply": &openapi.Schema{
							Type: "string",
						},
					},
				},
			},
		},
	}
}

// Client API for Rpc service
// +gen:openapi
type RpcService interface {
	// +gen:post=/api/{name}
	// +gen:body=*
	HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...client.CallOption) (*HelloWorldResponse, error)
}

type rpcService struct {
	c    client.Client
	name string
}

func NewRpcService(name string, c client.Client) RpcService {
	return &rpcService{
		c:    c,
		name: name,
	}
}

func (c *rpcService) HelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...client.CallOption) (*HelloWorldResponse, error) {
	req := c.c.NewRequest(c.name, "Rpc.HelloWorld", in)
	out := new(HelloWorldResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rpc service
// +gen:openapi
type RpcHandler interface {
	// +gen:post=/api/{name}
	// +gen:body=*
	HelloWorld(context.Context, *HelloWorldRequest, *HelloWorldResponse) error
}

func RegisterRpcHandler(s server.Server, hdlr RpcHandler, opts ...server.HandlerOption) error {
	type rpcImpl interface {
		HelloWorld(ctx context.Context, in *HelloWorldRequest, out *HelloWorldResponse) error
	}
	type Rpc struct {
		rpcImpl
	}
	h := &rpcHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&apipb.Endpoint{
		Name:    "Rpc.HelloWorld",
		Path:    []string{"/api/{name}"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, server.OpenAPIHandler(NewRpcOpenAPI()))
	return s.Handle(s.NewHandler(&Rpc{h}, opts...))
}

type rpcHandler struct {
	RpcHandler
}

func (h *rpcHandler) HelloWorld(ctx context.Context, in *HelloWorldRequest, out *HelloWorldResponse) error {
	return h.RpcHandler.HelloWorld(ctx, in, out)
}
